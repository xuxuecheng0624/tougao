<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.eprobj.mapper.UserMapper">

    <select id="findAll" resultType="com.eprobj.entity.User">
        select * from user
    </select>

    <select id="queryInfoByInfo" resultType="com.eprobj.entity.User">
        SELECT
            id,
            user_name AS userName,
            login_name AS loginName,
            address,
            email,
            telephone,
            note,
            status
        FROM
            user
        WHERE login_name like '%${info}%' or user_name like'%${info}%' or
        telephone like '%${info}%' or address like '%${info}%'
        ORDER BY create_date DESC
        limit #{page},#{limit}
    </select>

    <select id="queryInfoById" resultType="com.eprobj.entity.User">
        SELECT
            id,
            user_name AS userName,
            login_name AS loginName,
            address,
            email,
            telephone,
            note,
            status
        FROM
            user
        WHERE id=#{userId}
    </select>

    <select id="queryInfoNumByInfo" resultType="java.lang.Integer">
        SELECT
            count(*)
        FROM
            user
        WHERE login_name like '%${info}%' or user_name like'%${info}%' or
        telephone like '%${info}%' or address like '%${info}%'
    </select>

    <select id="queryInfoByUsername" resultType="com.eprobj.entity.User">
        SELECT
            id,
            user_name AS userName,
            login_name AS loginName,
            password,
            email,
            telephone
        FROM
            user
        WHERE login_name = #{loginName}
    </select>

    <update id="updateUserCode" parameterType="java.lang.String">
        UPDATE user SET code = #{code} WHERE email = #{email}
    </update>

    <select id="queryByUserEmail" resultType="com.eprobj.entity.User">
        SELECT
        id,
        user_name AS userName,
        login_name AS loginName,
        email,
        telephone,
        password,
        note,
        status,
        address,
        code
        FROM
        user
        WHERE email = #{email}
    </select>

    <update id="updatePassword" parameterType="com.eprobj.entity.User">
        UPDATE user SET password = #{newpassword} WHERE email = #{email}
    </update>
    <insert id="registerData" parameterType="com.eprobj.entity.User">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userName != null">
                user_name,
            </if>
            <if test="loginName != null">
                login_name,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="telephone != null">
                telephone,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="note != null">
                note,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="loginName != null">
                #{loginName,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="telephone != null">
                #{telephone,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="note != null">
                #{note,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <update id="updateUser" parameterType="com.eprobj.entity.User">
        UPDATE user SET
        user_name =#{userName},
        login_name=#{loginName},
        email=#{email},
        telephone=#{telephone},
        note=#{note},
        address=#{address},
        status=#{status}
        where id=#{id}
    </update>

    <delete id="delUserByIds">
        delete from user where
        id in
        <foreach collection="userIds" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
    </delete>

    <update id="updateUserStatus" parameterType="com.eprobj.entity.User">
        UPDATE user SET status = #{status} WHERE id = #{id}
    </update>


    <update id="resetPassword" parameterType="com.eprobj.entity.User">
        UPDATE user SET password = #{password} WHERE id  in
        <foreach collection="userIds" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
    </update>

    <select id="listByEmail" resultType="com.eprobj.entity.Role">
        SELECT
          role.role_id AS roleId,
          role.role_name AS roleName,
          role.role_content AS roleContent,
          role.STATUS,
          role.cdate
        FROM
            sys_user_role userrole
            LEFT JOIN sys_role role ON userrole.role_id = role.role_id
            LEFT JOIN sys_user USER ON USER.id = userrole.user_id
        WHERE
            USER.email = #{email}
    </select>
</mapper>